import Eris from "eris";
import { ZeraClient } from "../ZeraClient";
declare const _default: {
    new (data: Eris.BaseData, client: ZeraClient): {
        reply(content: Eris.MessageContent | string): Promise<Eris.Message<Eris.TextableChannel>> | undefined;
        activity?: Eris.MessageActivity | undefined;
        application?: Eris.MessageApplication | undefined;
        attachments: Eris.Attachment[];
        author: Eris.User;
        channel: Eris.TextableChannel;
        channelMentions: string[];
        cleanContent: string;
        command?: Eris.Command | undefined;
        content: string;
        createdAt: number;
        editedTimestamp?: number | undefined;
        embeds: Eris.Embed[];
        flags: number;
        guildID: string | undefined;
        id: string;
        interaction: Eris.MessageInteraction | null;
        jumpLink: string;
        member: Eris.Member | null;
        mentionEveryone: boolean;
        mentions: Eris.User[];
        messageReference: Eris.MessageReference | null;
        pinned: boolean;
        prefix?: string | undefined;
        reactions: {
            [s: string]: {
                count: number;
                me: boolean;
            };
        };
        referencedMessage?: Eris.Message<Eris.TextableChannel> | null | undefined;
        roleMentions: string[];
        stickers?: Eris.Sticker[] | undefined;
        timestamp: number;
        tts: boolean;
        type: number;
        webhookID: string | undefined;
        addReaction(reaction: string): Promise<void>;
        addReaction(reaction: string, userID: string): Promise<void>;
        crosspost(): Promise<Eris.Message<Eris.NewsChannel>>;
        delete(reason?: string | undefined): Promise<void>;
        deleteWebhook(token: string): Promise<void>;
        edit(content: Eris.MessageContent): Promise<Eris.Message<Eris.TextableChannel>>;
        editWebhook(token: string, options: Eris.MessageWebhookContent): Promise<Eris.Message<Eris.TextableChannel>>;
        getReaction(reaction: string, options?: Eris.GetMessageReactionOptions | undefined): Promise<Eris.User[]>;
        getReaction(reaction: string, limit?: number | undefined, before?: string | undefined, after?: string | undefined): Promise<Eris.User[]>;
        pin(): Promise<void>;
        removeReaction(reaction: string, userID?: string | undefined): Promise<void>;
        removeReactionEmoji(reaction: string): Promise<void>;
        removeReactions(): Promise<void>;
        unpin(): Promise<void>;
        inspect(): any;
        toString(): string;
        toJSON(props?: string[] | undefined): Eris.JSONCache;
    };
    getCreatedAt(id: string): number;
};
export = _default;
